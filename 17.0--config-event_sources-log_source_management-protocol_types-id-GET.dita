<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE reference PUBLIC "-//IBM//DTD DITA IBM Reference//EN" "dtd/ibm-reference.dtd">
<reference id="api-17.0--config-event_sources-log_source_management-protocol_types-id-GET" xml:lang="en-us">
<title>GET /config/event_sources/log_source_management/protocol_types/{id}</title>
<shortdesc>Retrieves a protocol type by ID. Requires the System Administrator, Security Admin, or Manage Log Sources permission.</shortdesc>
<prolog>
<metadata>
<keywords>
<apiname>/config/event_sources/log_source_management/protocol_types/{id}</apiname>
<keyword>GET</keyword>
<keyword>API</keyword>
<keyword>REST API</keyword>
</keywords>
</metadata>
</prolog>
<refbody>
<refsyn/>
<refsyn>
<table pgwide="0">
<title>GET /config/event_sources/log_source_management/protocol_types/{id} resource details</title>
<desc><p outputclass="summary">GET /config/event_sources/log_source_management/protocol_types/{id} resource details</p></desc>
<tgroup cols="1">
<colspec colname="col1" colwidth="1*" />
<thead>
<row valign="bottom">
<entry colname="col1">MIME Type</entry>
</row>
</thead>
<tbody>
<row>
<entry colname="col1"><p>application/json
</p></entry>
</row>
</tbody>
</tgroup>
</table>
</refsyn>
<refsyn>
<table pgwide="0">
<title>GET /config/event_sources/log_source_management/protocol_types/{id} request parameter details</title>
<desc><p outputclass="summary">GET /config/event_sources/log_source_management/protocol_types/{id} request parameter details</p></desc>
<tgroup cols="6">
<colspec colname="col1" colwidth="1*" />
<colspec colname="col2" colwidth="1*" />
<colspec colname="col3" colwidth="1*" />
<colspec colname="col4" colwidth="1*" />
<colspec colname="col5" colwidth="1*" />
<colspec colname="col6" colwidth="2*" />
<thead>
<row valign="bottom">
<entry colname="col1">Parameter</entry>
<entry colname="col2">Type</entry>
<entry colname="col3">Optionality</entry>
<entry colname="col4">Data Type</entry>
<entry colname="col5">MIME Type</entry>
<entry colname="col6">Description</entry>
</row>
</thead>
<tbody>
<row>
<entry colname="col1"><p>id</p></entry>
<entry colname="col2"><p>path</p></entry>
<entry colname="col3"><p>Required</p></entry>
<entry colname="col4"><p>Number (Integer)</p></entry>
<entry colname="col5"><p>text/plain</p></entry>
<entry colname="col6"><p>The ID of the protocol type to retrieve.</p></entry>
</row>
<row>
<entry colname="col1"><p>fields</p></entry>
<entry colname="col2"><p>query</p></entry>
<entry colname="col3"><p>Optional</p></entry>
<entry colname="col4"><p>String</p></entry>
<entry colname="col5"><p>text/plain</p></entry>
<entry colname="col6"><p>Optional - Use this parameter to specify which fields you would like to get back in the response. Fields that are not named are excluded. Specify subfields in brackets and multiple fields in the same object are separated by commas.</p></entry>
</row>
</tbody>
</tgroup>
</table>
</refsyn>
<refsyn>
<table pgwide="0">
<title>GET /config/event_sources/log_source_management/protocol_types/{id} response codes</title>
<desc><p outputclass="summary">GET /config/event_sources/log_source_management/protocol_types/{id} response codes</p></desc>
<tgroup cols="3">
<colspec colname="col1" colwidth="1*" />
<colspec colname="col2" colwidth="1*" />
<colspec colname="col3" colwidth="3*" />
<thead>
<row valign="bottom">
<entry colname="col1">HTTP Response Code</entry>
<entry colname="col2">Unique Code</entry>
<entry colname="col3">Description</entry>
</row>
</thead>
<tbody>
<row>
<entry colname="col1"><p>200</p></entry>
<entry colname="col2"><p/></entry>
<entry colname="col3"><p>The protocol type was retrieved successfully.</p></entry>
</row>
<row>
<entry colname="col1"><p>404</p></entry>
<entry colname="col2"><p>1002</p></entry>
<entry colname="col3"><p>The protocol type ID was not found.</p></entry>
</row>
<row>
<entry colname="col1"><p>500</p></entry>
<entry colname="col2"><p>1020</p></entry>
<entry colname="col3"><p>An error occurred during the attempt to retrieve the protocol.</p></entry>
</row>
</tbody>
</tgroup>
</table>
</refsyn>
<refsyn>
<title>Response Description</title>
<p>The protocol type after it is retrieved. A protocol type contains the following fields:
 <ul>
 <li><b>id</b> - Long - The ID of the protocol type.</li>
 <li><b>name</b> - String - The unique name of the protocol type.</li>
 <li><b>version</b> - String - The version of the protocol type component.</li>
 <li><b>latest_version</b> - String - The latest available version of the protocol type component.</li>
 <li><b>gateway_supported</b> - Boolean -  If this protocol type can be configured for a gateway log source, the condition is set to 'true'; otherwise, the condition is set to 'false'. A gateway log source is a stand-alone protocol configuration. The log source receives no events itself, and serves as a host for a protocol configuration that retrieves event data to feed other log sources. It acts as a "gateway" for events from multiple systems to enter the event pipeline. Not all protocol types can be used as a gateway if they don't support collecting event data from multiple sources.</li>
 <li><b>inbound</b> - Boolean - Indicates whether this is an inbound protocol.</li>
 <li><b>parameters</b> - Array - The parameters of this protocol type.</li>
 <li><b>parameter_groups</b> - Array - The parameter groups of this protocol type.</li>
 <li><b>testing_capabilities</b> - Object - The testing capabilities of this protocol type. These describe the capabilities of the Log Source Testing API for Log Sources using this Protocol Type.</li>
 </ul>
 
 A parameter contains the following fields:
 <ul>
 <li><b>id</b> - Long - The ID of the parameter.</li>
 <li><b>name</b> - String - The name of the parameter.</li>
 <li><b>type</b> - Enumeration - The type of the parameter. Possible values are: STRING, TEXT, INTEGER, REAL, BOOLEAN, DATE, TIME, DATETIME, INTERVAL, HOST, PASSWORD, REGEX</li>
 <li><b>group_id</b> - Number - The ID of the protocol parameter group that this parameter belongs to. The group_id is optional.</li>
 <li><b>required</b> - Boolean - If the parameter is mandatory, the condition is set to 'true'; otherwise, the condition is set to 'false'.</li>
 <li><b>min_length</b> - Integer - The minimum length of the parameter value for the following parameter types: STRING, TEXT, HOST, PASSWORD, REGEX. The min_length is optional.</li>
 <li><b>max_length</b> - Integer - The maximum length of the parameter value for the following parameter types: STRING, TEXT, HOST, PASSWORD, REGEX. The max_length is optional.</li>
 <li><b>min_value</b> - String - The minimum of the parameter value for the following parameter types: INTEGER, REAL, DATE, TIME, DATETIME, INTERVAL. The min_value is optional.</li>
 <li><b>max_value</b> - String - The maximum of the parameter value for the following parameter types: INTEGER, REAL, DATE, TIME, DATETIME, INTERVAL. The max_value is optional.</li>
 <li><b>default_value</b> - String - The optional default parameter value.</li>
 <li><b>pattern</b> - String - An optional Java regex pattern restriction on the parameter value for the following parameter types: STRING, TEXT, HOST, PASSWORD.</li>
 <li><b>pattern_error_message</b> - String -  An optional message to display when the 'pattern' restriction fails.</li>
 <li><b>allowed_values</b> - Array - An optional restrictive list of allowed parameter values that is used to implement an enumeration parameter.</li>
 <li><b>rules</b> - Array - Parameter rules manage different parameter conditions (for example, Option A is only available when Option B is set to 'true', Option C is required whenever Option A is set to 'false', and so on.)</li>
 </ul>
 
 A parameter allowed value contains the following fields:
 <ul>
 <li><b>name</b> - String - The name of the allowed value.</li>
 <li><b>value</b> - String - The allowed value.</li>
 </ul>
 
 A parameter rule contains the following fields:
 <ul>
 <li><b>parameter_id</b> - String - The ID of the parameter affected by the rule.</li>
 <li><b>trigger_parameter_id</b> - Long - The ID of the trigger parameter.</li>
 <li><b>trigger_pattern</b> - String - The pattern that triggers the rule. For example, if the value of trigger_parameter_id matches the regular expression of this field, the rule triggers.</li>
 <li><b>affected_property</b> - String - The affected property. Possible values are:<ul><li>AVAILABLE: Indicates that the parameter's availability will be affected by this rule</li><li>REQUIRED: Indicates that the required state of the parameter will be affected by this rule</li><li>DEFAULT: Indicates that the default value of the parameter will be affected by this rule.</li></ul></li>
 <li><b>affected_property_value</b> - String - The value to be applied to the affected parameter when the rule is triggered. The following list explains how this field is interpreted based on the affected property::<ul><li>AVAILABLE: This will be a boolean value indicating whether the affected parameter should be available. Since all fields are always available by default, setting this to 'true' does not make much sense.</li><li>REQUIRED: This will be a boolean value indicating whether the affected parameter should be required.</li><li>DEFAULT: This will be the default value to be used by the affected parameter.</li></ul></li>
 </ul>
 
 A parameter group contains the following fields:
 <ul>
 <li><b>id</b> - Long - The ID of the protocol parameter group.</li>
 <li><b>name</b> - String - The name of the protocol parameter group</li>
 <li><b>required</b> - Boolean -  If at least one parameter in this group must be set, the condition is set to 'true'; otherwise, the condition is set to 'false'.</li>
 </ul>

 Testing capabilities contain the following fields:
 <ul>
 <li><b>testable</b> - Boolean - Indicates whether the protocol type is testable.</li>
 <li><b>can_collect_events</b> - Boolean - Indicates whether the protocol type can collect test events.</li>
 <li><b>can_accept_sample_events</b> - Boolean - Indicates whether the protocol type can accept sample events (only applicable to inbound protocol types).</li>
 </ul></p>
</refsyn>
<refsyn>
<title>Response Sample</title>
<codeblock>
{
    "gateway_supported": true,
    "id": 42,
    "inbound": true,
    "latest_version": "String",
    "name": "String",
    "parameter_groups": [
        {
            "id": 42,
            "name": "String",
            "required": true
        }
    ],
    "parameters": [
        {
            "allowed_values": [
                {
                    "name": "String",
                    "value": "String"
                }
            ],
            "default_value": "String",
            "description": "String",
            "group_id": 42,
            "id": 42,
            "label": "String",
            "max_length": 42,
            "max_value": "String",
            "min_length": 42,
            "min_value": "String",
            "name": "String",
            "pattern": "String",
            "pattern_description": "String",
            "required": true,
            "rules": [
                {
                    "affected_property": "String",
                    "affected_property_value": "String",
                    "parameter_id": 42,
                    "trigger_parameter_id": 42,
                    "trigger_pattern": "String"
                }
            ],
            "type": "String"
        }
    ],
    "testing_capabilities": {
        "can_accept_sample_events": true,
        "can_collect_events": true,
        "testable": true
    },
    "version": "String"
}
</codeblock>
</refsyn>
</refbody>
</reference>